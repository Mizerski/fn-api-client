import { ApiClient } from '../services/ApiClient'
import { ApiResponse, ApiError } from '../types/types'
import { ENDPOINT_PREFIX, VOTE } from './endpoints'
import { storage } from './storage'

/**
 * Exemplo de uso do GET com par√¢metros.
 * Demonstra como fazer requisi√ß√µes GET enviando par√¢metros na query string.
 */

// Configura√ß√£o do cliente API
export const api = new ApiClient({
    baseURL: ENDPOINT_PREFIX,
    headers: {
        'Content-Type': 'application/json',
    },
})

// Interceptador para adicionar token din√¢mico
api.addRequestInterceptor((config) => {
    const tokens = storage.getTokens()
    if (tokens?.accessToken) {
        config.headers = {
            ...config.headers,
            Authorization: `Bearer ${tokens.accessToken}`,
        }
    }
    return config
})

/**
 * Interfaces para tipagem das respostas.
 */
interface UserVoteResponse {
    id: string
    userId: string
    agendaId: string
    voteType: 'FOR' | 'AGAINST' | 'ABSTAIN'
    createdAt: string
    updatedAt: string
}

interface User {
    id: string
    name: string
    email: string
    createdAt: string
}

/**
 * Simula√ß√£o de estado do componente React.
 */
let userVote: string | null = null
let error: string | null = null

const setUserVote = (vote: string | null) => {
    userVote = vote
    console.log('üó≥Ô∏è User vote updated:', vote)
}

const setError = (errorMessage: string) => {
    error = errorMessage
    console.error('‚ùå Error set:', errorMessage)
}

/**
 * Exemplo 1: GET com par√¢metros - seu caso de uso espec√≠fico
 */
console.log('\n=== Exemplo 1: GET com Par√¢metros (Seu Caso de Uso) ===')

// Agora voc√™ pode fazer assim:
api.get<UserVoteResponse>(
    VOTE.GET_BY_USER_ID_AND_AGENDA_ID,
    {
        userId: '123',
        agendaId: '456'
    },
    {
        onSuccess: (response: ApiResponse<UserVoteResponse>) => {
            setUserVote(response.data.voteType)
            console.log('‚úÖ Voto encontrado:', response.data.voteType)
        },
        onError: (error: ApiError) => {
            if (error.status === 404) {
                // Usu√°rio n√£o votou ainda
                setUserVote(null)
                console.log('‚ÑπÔ∏è Usu√°rio ainda n√£o votou')
            } else {
                setError(error.message)
                console.error('‚ùå Erro ao buscar voto:', error.message)
            }
        },
    }
)

/**
 * Exemplo 2: GET com m√∫ltiplos par√¢metros
 */
console.log('\n=== Exemplo 2: GET com M√∫ltiplos Par√¢metros ===')

api.get<User[]>(
    '/usuarios',
    {
        page: 1,
        limit: 10,
        status: 'active',
        role: 'admin',
        includeDeleted: false
    },
    {
        onSuccess: (response) => {
            console.log('‚úÖ Usu√°rios encontrados:', response.data.length)
            console.log('üìã Lista:', response.data.map(u => u.name))
        },
        onError: (error) => {
            console.error('‚ùå Erro ao buscar usu√°rios:', error.message)
        }
    }
)

/**
 * Exemplo 3: GET simples sem par√¢metros (compatibilidade com vers√£o anterior)
 */
console.log('\n=== Exemplo 3: GET Simples (Compatibilidade) ===')

api.get<User>('/usuarios/me', {
    onSuccess: (response) => {
        console.log('‚úÖ Dados do usu√°rio logado:', response.data.name)
    },
    onError: (error) => {
        console.error('‚ùå Erro ao buscar dados do usu√°rio:', error.message)
    }
})

/**
 * Exemplo 4: DELETE com par√¢metros
 */
console.log('\n=== Exemplo 4: DELETE com Par√¢metros ===')

api.delete<{ message: string }>(
    '/votos',
    {
        userId: '123',
        agendaId: '456'
    },
    {
        onSuccess: (response) => {
            console.log('‚úÖ Voto removido:', response.data.message)
            setUserVote(null)
        },
        onError: (error) => {
            console.error('‚ùå Erro ao remover voto:', error.message)
        }
    }
)

/**
 * Exemplo 5: Interceptador que modifica par√¢metros
 */
console.log('\n=== Exemplo 5: Interceptador para Par√¢metros ===')

api.addRequestInterceptor((config) => {
    // Adiciona timestamp autom√°tico a todos os par√¢metros
    if (config.params) {
        config.params = {
            ...config.params,
            _t: Date.now()
        }
    }

    // Log dos par√¢metros
    if (config.params) {
        console.log('üîç Par√¢metros da requisi√ß√£o:', config.params)
    }

    return config
})

// Teste com o novo interceptador
api.get<UserVoteResponse>(
    VOTE.GET_BY_USER_ID_AND_AGENDA_ID,
    { userId: '789', agendaId: '101' },
    {
        onSuccess: (response) => {
            console.log('‚úÖ Requisi√ß√£o com timestamp autom√°tico bem-sucedida')
        },
        onError: (error) => {
            console.error('‚ùå Erro:', error.message)
        }
    }
)

/**
 * Compara√ß√£o: Antes vs Agora
 */
console.log('\n=== Compara√ß√£o: Antes vs Agora ===')

// ‚ùå ANTES (n√£o funcionava):
// api.get(VOTE.GET_BY_USER_ID_AND_AGENDA_ID, { ... })

// ‚úÖ AGORA (funciona perfeitamente):
console.log('‚úÖ Agora voc√™ pode passar par√¢metros diretamente no GET!')
console.log('‚úÖ O token √© adicionado automaticamente pelo interceptador!')
console.log('‚úÖ Mant√©m compatibilidade com o formato anterior!')

export { userVote, error } 